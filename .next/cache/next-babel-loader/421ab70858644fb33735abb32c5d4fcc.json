{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/jordanrendall/DevProjects/Github/react-calendar/components/Calendar/LeftArrow.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useContext } from 'react';\nimport { getMonthStructure } from './calendarFunctions';\nimport { CalendarContext } from './context/CalendarContext';\n\nvar LeftArrow = function LeftArrow() {\n  var context = useContext(CalendarContext);\n  var _context$state = context.state,\n      month = _context$state.month,\n      year = _context$state.year;\n  return __jsx(\"button\", {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var newYear, newMonth, monthStructure;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (month > 1) {\n                context.setState(function (prevState) {\n                  return _objectSpread({}, prevState, {\n                    month: month - 1\n                  });\n                });\n                newYear = year;\n                newMonth = month - 1;\n              } else {\n                context.setState(function (prevState) {\n                  return _objectSpread({}, prevState, {\n                    month: 12,\n                    year: year - 1\n                  });\n                });\n                newYear = year - 1;\n                newMonth = 12;\n              }\n\n              monthStructure = getMonthStructure(newYear, newMonth);\n              context.setState(function (prevState) {\n                return _objectSpread({}, prevState, {\n                  firstDay: monthStructure.firstDay,\n                  lastDay: monthStructure.lastDay,\n                  numberOfDays: monthStructure.numberOfDays\n                });\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"<\");\n};\n\nexport default LeftArrow;","map":{"version":3,"sources":["/Users/jordanrendall/DevProjects/Github/react-calendar/components/Calendar/LeftArrow.js"],"names":["useContext","getMonthStructure","CalendarContext","LeftArrow","context","state","month","year","setState","prevState","newYear","newMonth","monthStructure","firstDay","lastDay","numberOfDays"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,eAAT,QAAgC,2BAAhC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAMC,OAAO,GAAGJ,UAAU,CAACE,eAAD,CAA1B;AADsB,uBAIlBE,OAJkB,CAGpBC,KAHoB;AAAA,MAGXC,KAHW,kBAGXA,KAHW;AAAA,MAGJC,IAHI,kBAGJA,IAHI;AAMtB,SACE;AACE,IAAA,OAAO;AAAA;AAAA;AAAA;AAAA,6BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAEP,kBAAID,KAAK,GAAG,CAAZ,EAAe;AACbF,gBAAAA,OAAO,CAACI,QAAR,CAAiB,UAAAC,SAAS;AAAA,2CACrBA,SADqB;AAExBH,oBAAAA,KAAK,EAAEA,KAAK,GAAG;AAFS;AAAA,iBAA1B;AAIAI,gBAAAA,OAAO,GAAGH,IAAV;AACAI,gBAAAA,QAAQ,GAAGL,KAAK,GAAG,CAAnB;AACD,eAPD,MAOO;AACLF,gBAAAA,OAAO,CAACI,QAAR,CAAiB,UAAAC,SAAS;AAAA,2CACrBA,SADqB;AAExBH,oBAAAA,KAAK,EAAE,EAFiB;AAGxBC,oBAAAA,IAAI,EAAEA,IAAI,GAAG;AAHW;AAAA,iBAA1B;AAMAG,gBAAAA,OAAO,GAAGH,IAAI,GAAG,CAAjB;AACAI,gBAAAA,QAAQ,GAAG,EAAX;AACD;;AACKC,cAAAA,cAnBC,GAmBgBX,iBAAiB,CAACS,OAAD,EAAUC,QAAV,CAnBjC;AAoBPP,cAAAA,OAAO,CAACI,QAAR,CAAiB,UAAAC,SAAS;AAAA,yCACrBA,SADqB;AAExBI,kBAAAA,QAAQ,EAAED,cAAc,CAACC,QAFD;AAGxBC,kBAAAA,OAAO,EAAEF,cAAc,CAACE,OAHA;AAIxBC,kBAAAA,YAAY,EAAEH,cAAc,CAACG;AAJL;AAAA,eAA1B;;AApBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF,EADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AA+BD,CArCD;;AAuCA,eAAeZ,SAAf","sourcesContent":["import { useContext } from 'react';\nimport { getMonthStructure } from './calendarFunctions';\nimport { CalendarContext } from './context/CalendarContext';\n\nconst LeftArrow = () => {\n  const context = useContext(CalendarContext);\n  const {\n    state: { month, year },\n  } = context;\n\n  return (\n    <button\n      onClick={async () => {\n        let newYear, newMonth;\n        if (month > 1) {\n          context.setState(prevState => ({\n            ...prevState,\n            month: month - 1,\n          }));\n          newYear = year;\n          newMonth = month - 1;\n        } else {\n          context.setState(prevState => ({\n            ...prevState,\n            month: 12,\n            year: year - 1,\n          }));\n\n          newYear = year - 1;\n          newMonth = 12;\n        }\n        const monthStructure = getMonthStructure(newYear, newMonth);\n        context.setState(prevState => ({\n          ...prevState,\n          firstDay: monthStructure.firstDay,\n          lastDay: monthStructure.lastDay,\n          numberOfDays: monthStructure.numberOfDays,\n        }));\n      }}\n    >{`<`}</button>\n  );\n};\n\nexport default LeftArrow;\n"]},"metadata":{},"sourceType":"module"}